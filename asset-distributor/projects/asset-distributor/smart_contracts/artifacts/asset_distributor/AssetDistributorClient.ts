/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AssetDistributor","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"bootstrap","args":[{"type":"pay","name":"mbrTxn"},{"type":"uint64","name":"assetId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"buyListing","args":[{"type":"pay","name":"paymentTxn","desc":"The transaction that pays for the asset.\nThe transaction has the following constraints: \n- The amount must be 2000 microalgos or 0.02 algos.\n- The fee must be 2000 microalgos or 0.02 algos."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"This completes a buy transaction for the asset.","events":[],"recommendations":{}},{"name":"withdrawEarnings","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"This withdraws all the earnings of the smart contract","events":[],"recommendations":{}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRJZA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[161],"errorMessage":"Minimum balance must be at least 0.2 algos"},{"pc":[73],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[85,97,119,145],"errorMessage":"OnCompletion is not NoOp"},{"pc":[291],"errorMessage":"account funded"},{"pc":[238],"errorMessage":"account opted into asset"},{"pc":[149],"errorMessage":"can only call when creating"},{"pc":[76,88,100,122],"errorMessage":"can only call when not creating"},{"pc":[208,235,263,330,342],"errorMessage":"check GlobalState exists"},{"pc":[110,132],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDQgMjAwMDAwCiAgICBieXRlY2Jsb2NrICJhc3NldElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MTQKICAgIC8vIGV4cG9ydCBjbGFzcyBBc3NldERpc3RyaWJ1dG9yIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQogICAgcHVzaGJ5dGVzcyAweGI4NDQ3YjM2IDB4MWUzMjAxOWEgMHg3YjkxZTk0ZSAweDAyNWZkYWQzIDB4MjQ4N2MzMmMgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIsIG1ldGhvZCAiYm9vdHN0cmFwKHBheSx1aW50NjQpdm9pZCIsIG1ldGhvZCAiYnV5TGlzdGluZyhwYXkpdm9pZCIsIG1ldGhvZCAid2l0aGRyYXdFYXJuaW5ncygpdm9pZCIsIG1ldGhvZCAiZGVsZXRlQXBwbGljYXRpb24oKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZUFwcGxpY2F0aW9uX3JvdXRlQDMgbWFpbl9ib290c3RyYXBfcm91dGVANCBtYWluX2J1eUxpc3Rpbmdfcm91dGVANSBtYWluX3dpdGhkcmF3RWFybmluZ3Nfcm91dGVANiBtYWluX2RlbGV0ZUFwcGxpY2F0aW9uX3JvdXRlQDcKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjE0CiAgICAvLyBleHBvcnQgY2xhc3MgQXNzZXREaXN0cmlidXRvciBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fZGVsZXRlQXBwbGljYXRpb25fcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjcyCiAgICAvLyBAYWJpbWV0aG9kKHsgYWxsb3dBY3Rpb25zOiAnRGVsZXRlQXBwbGljYXRpb24nIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBEZWxldGVBcHBsaWNhdGlvbgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRlbGV0ZUFwcGxpY2F0aW9uCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3dpdGhkcmF3RWFybmluZ3Nfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjYwCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB3aXRoZHJhd0Vhcm5pbmdzCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2J1eUxpc3Rpbmdfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjQxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MTQKICAgIC8vIGV4cG9ydCBjbGFzcyBBc3NldERpc3RyaWJ1dG9yIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo0MQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGJ1eUxpc3RpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYm9vdHN0cmFwX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoyMAogICAgLy8gcHVibGljIGJvb3RzdHJhcChtYnJUeG46IGd0eG4uUGF5bWVudFR4biwgYXNzZXRJZDogdWludDY0KTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjE0CiAgICAvLyBleHBvcnQgY2xhc3MgQXNzZXREaXN0cmlidXRvciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHB1YmxpYyBib290c3RyYXAobWJyVHhuOiBndHhuLlBheW1lbnRUeG4sIGFzc2V0SWQ6IHVpbnQ2NCk6IHZvaWQgewogICAgY2FsbHN1YiBib290c3RyYXAKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlQXBwbGljYXRpb25fcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjE3CiAgICAvLyBAYWJpbWV0aG9kKHsgb25DcmVhdGU6ICdyZXF1aXJlJyB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo6QXNzZXREaXN0cmlidXRvci5ib290c3RyYXAobWJyVHhuOiB1aW50NjQsIGFzc2V0SWQ6IHVpbnQ2NCkgLT4gdm9pZDoKYm9vdHN0cmFwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHB1YmxpYyBib290c3RyYXAobWJyVHhuOiBndHhuLlBheW1lbnRUeG4sIGFzc2V0SWQ6IHVpbnQ2NCk6IHZvaWQgewogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoyMQogICAgLy8gYXNzZXJ0KG1iclR4bi5hbW91bnQgPj0gMjAwXzAwMCwgJ01pbmltdW0gYmFsYW5jZSBtdXN0IGJlIGF0IGxlYXN0IDAuMiBhbGdvcycpOwogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgIGludGNfMyAvLyAyMDAwMDAKICAgID49CiAgICBhc3NlcnQgLy8gTWluaW11bSBiYWxhbmNlIG11c3QgYmUgYXQgbGVhc3QgMC4yIGFsZ29zCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gYXNzZXJ0KG1iclR4bi5yZWNlaXZlciA9PT0gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MpOwogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjIzCiAgICAvLyBhc3NlcnQoVHhuLnNlbmRlciA9PT0gR2xvYmFsLmNyZWF0b3JBZGRyZXNzKTsKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MjUtMjkKICAgIC8vIGl0eG4uYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgeGZlckFzc2V0OiBhc3NldElkLAogICAgLy8gfSkuc3VibWl0KCk7CiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gYXNzZXRBbW91bnQ6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MjUtMjkKICAgIC8vIGl0eG4uYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgeGZlckFzc2V0OiBhc3NldElkLAogICAgLy8gfSkuc3VibWl0KCk7CiAgICBpbnRjXzIgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MTUKICAgIC8vIGFzc2V0SWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBieXRlY18wIC8vICJhc3NldElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MzEKICAgIC8vIHRoaXMuYXNzZXRJZC52YWx1ZSA9IGFzc2V0SWQ7CiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo6QXNzZXREaXN0cmlidXRvci5idXlMaXN0aW5nKHBheW1lbnRUeG46IHVpbnQ2NCkgLT4gdm9pZDoKYnV5TGlzdGluZzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjQxLTQyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBidXlMaXN0aW5nKHBheW1lbnRUeG46IGd0eG4uUGF5bWVudFR4bik6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo0MwogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIuaXNPcHRlZEluKEFzc2V0KHRoaXMuYXNzZXRJZC52YWx1ZSkpKTsKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjE1CiAgICAvLyBhc3NldElkID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImFzc2V0SWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NDMKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyLmlzT3B0ZWRJbihBc3NldCh0aGlzLmFzc2V0SWQudmFsdWUpKSk7CiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo0NAogICAgLy8gYXNzZXJ0KHBheW1lbnRUeG4ucmVjZWl2ZXIgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo0NQogICAgLy8gYXNzZXJ0KHBheW1lbnRUeG4uc2VuZGVyID09PSBUeG4uc2VuZGVyKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo0NgogICAgLy8gYXNzZXJ0KEFzc2V0KHRoaXMuYXNzZXRJZC52YWx1ZSkuYmFsYW5jZShUeG4uc2VuZGVyKSA9PT0gMCk7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gYXNzZXRJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJhc3NldElkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjQ2CiAgICAvLyBhc3NlcnQoQXNzZXQodGhpcy5hc3NldElkLnZhbHVlKS5iYWxhbmNlKFR4bi5zZW5kZXIpID09PSAwKTsKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgb3B0ZWQgaW50byBhc3NldAogICAgIQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo0NwogICAgLy8gYXNzZXJ0KHBheW1lbnRUeG4uYW1vdW50ID09PSAyXzAwMCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgcHVzaGludCAyMDAwIC8vIDIwMDAKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjQ4CiAgICAvLyBhc3NlcnQocGF5bWVudFR4bi5mZWUgPT09IDJfMDAwKTsKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgRmVlCiAgICBwdXNoaW50IDIwMDAgLy8gMjAwMAogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NTAtNTQKICAgIC8vIGl0eG4uYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIHhmZXJBc3NldDogdGhpcy5hc3NldElkLnZhbHVlLAogICAgLy8gICBhc3NldEFtb3VudDogMSwKICAgIC8vICAgYXNzZXRSZWNlaXZlcjogVHhuLnNlbmRlciwKICAgIC8vIH0pLnN1Ym1pdCgpOwogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6MTUKICAgIC8vIGFzc2V0SWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiYXNzZXRJZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gYXNzZXRSZWNlaXZlcjogVHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NTIKICAgIC8vIGFzc2V0QW1vdW50OiAxLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo1MC01NAogICAgLy8gaXR4bi5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgeGZlckFzc2V0OiB0aGlzLmFzc2V0SWQudmFsdWUsCiAgICAvLyAgIGFzc2V0QW1vdW50OiAxLAogICAgLy8gICBhc3NldFJlY2VpdmVyOiBUeG4uc2VuZGVyLAogICAgLy8gfSkuc3VibWl0KCk7CiAgICBpbnRjXzIgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6OkFzc2V0RGlzdHJpYnV0b3Iud2l0aGRyYXdFYXJuaW5ncygpIC0+IHZvaWQ6CndpdGhkcmF3RWFybmluZ3M6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo2MgogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IEdsb2JhbC5jcmVhdG9yQWRkcmVzcyk7CiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjYzCiAgICAvLyBjb25zdCBhcHBCYWxhbmNlVG9TZW5kOiB1aW50NjQgPSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5iYWxhbmNlIC0gMjAwXzAwMDsKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgaW50Y18zIC8vIDIwMDAwMAogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NjQKICAgIC8vIGFzc2VydChhcHBCYWxhbmNlVG9TZW5kID4gMCk7CiAgICBkdXAKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NjYtNjkKICAgIC8vIGl0eG4ucGF5bWVudCh7CiAgICAvLyAgIHJlY2VpdmVyOiBUeG4uc2VuZGVyLAogICAgLy8gICBhbW91bnQ6IGFwcEJhbGFuY2VUb1NlbmQsCiAgICAvLyB9KS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NjcKICAgIC8vIHJlY2VpdmVyOiBUeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjY2LTY5CiAgICAvLyBpdHhuLnBheW1lbnQoewogICAgLy8gICByZWNlaXZlcjogVHhuLnNlbmRlciwKICAgIC8vICAgYW1vdW50OiBhcHBCYWxhbmNlVG9TZW5kLAogICAgLy8gfSkuc3VibWl0KCkKICAgIGludGNfMSAvLyAxCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo6QXNzZXREaXN0cmlidXRvci5kZWxldGVBcHBsaWNhdGlvbigpIC0+IHZvaWQ6CmRlbGV0ZUFwcGxpY2F0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyID09PSBHbG9iYWwuY3JlYXRvckFkZHJlc3MpOwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gYXNzZXRJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJhc3NldElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NzYKICAgIC8vIGlmICh0aGlzLmFzc2V0SWQuaGFzVmFsdWUpIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJ6IGRlbGV0ZUFwcGxpY2F0aW9uX2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NzcKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyLmlzT3B0ZWRJbihBc3NldCh0aGlzLmFzc2V0SWQudmFsdWUpKSk7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gYXNzZXRJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJhc3NldElkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyBhc3NlcnQoVHhuLnNlbmRlci5pc09wdGVkSW4oQXNzZXQodGhpcy5hc3NldElkLnZhbHVlKSkpOwogICAgYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCiAgICBidXJ5IDEKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NzktODQKICAgIC8vIGl0eG4uYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICBhc3NldENsb3NlVG86IEdsb2JhbC5jcmVhdG9yQWRkcmVzcywKICAgIC8vICAgeGZlckFzc2V0OiB0aGlzLmFzc2V0SWQudmFsdWUsCiAgICAvLyAgIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jcmVhdG9yQWRkcmVzcywKICAgIC8vIH0pLnN1Ym1pdCgpOwogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6ODEKICAgIC8vIGFzc2V0Q2xvc2VUbzogR2xvYmFsLmNyZWF0b3JBZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gYXNzZXRJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJhc3NldElkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjgzCiAgICAvLyBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3JlYXRvckFkZHJlc3MsCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIGl0eG5fZmllbGQgQXNzZXRDbG9zZVRvCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo4MAogICAgLy8gYXNzZXRBbW91bnQ6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6NzktODQKICAgIC8vIGl0eG4uYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICBhc3NldENsb3NlVG86IEdsb2JhbC5jcmVhdG9yQWRkcmVzcywKICAgIC8vICAgeGZlckFzc2V0OiB0aGlzLmFzc2V0SWQudmFsdWUsCiAgICAvLyAgIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jcmVhdG9yQWRkcmVzcywKICAgIC8vIH0pLnN1Ym1pdCgpOwogICAgaW50Y18yIC8vIDQKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKCmRlbGV0ZUFwcGxpY2F0aW9uX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hc3NldF9kaXN0cmlidXRvci9jb250cmFjdC5hbGdvLnRzOjg3LTkxCiAgICAvLyBpdHhuLnBheW1lbnQoewogICAgLy8gICByZWNlaXZlcjogVHhuLnNlbmRlciwKICAgIC8vICAgYW1vdW50OiAwLAogICAgLy8gICBjbG9zZVJlbWFpbmRlclRvOiBHbG9iYWwuY3JlYXRvckFkZHJlc3MsCiAgICAvLyB9KS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6ODgKICAgIC8vIHJlY2VpdmVyOiBUeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2Fzc2V0X2Rpc3RyaWJ1dG9yL2NvbnRyYWN0LmFsZ28udHM6OTAKICAgIC8vIGNsb3NlUmVtYWluZGVyVG86IEdsb2JhbC5jcmVhdG9yQWRkcmVzcywKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo4OQogICAgLy8gYW1vdW50OiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNzZXRfZGlzdHJpYnV0b3IvY29udHJhY3QuYWxnby50czo4Ny05MQogICAgLy8gaXR4bi5wYXltZW50KHsKICAgIC8vICAgcmVjZWl2ZXI6IFR4bi5zZW5kZXIsCiAgICAvLyAgIGFtb3VudDogMCwKICAgIC8vICAgY2xvc2VSZW1haW5kZXJUbzogR2xvYmFsLmNyZWF0b3JBZGRyZXNzLAogICAgLy8gfSkuc3VibWl0KCkKICAgIGludGNfMSAvLyAxCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEEwJoMJgEHYXNzZXRJZDEbQQAqggUEuER7NgQeMgGaBHuR6U4EAl/a0wQkh8MsNhoAjgUATAAyABwAEAACIkMxGYEFEkQxGESIAOcjQzEZFEQxGESIAL0jQzEZFEQxGEQxFiMJSTgQIxJEiABWI0MxGRREMRhEMRYjCUk4ECMSRDYaAReIAAwjQzEZFEQxGBREI0OKAgCL/jgIJQ9Ei/44BzIKEkQxADIJEkSxMgqL/7IRshQishIkshAisgGzKIv/Z4mKAQAxACIoZURwAEUBRIv/OAcyChJEi/84ADEAEkQxACIoZURwAEQURIv/OAiB0A8SRIv/OAGB0A8SRLEiKGVEMQCyFCOyErIRJLIQIrIBs4kxADIJEkQyCnMARCUJSUSxMQCyB7III7IQIrIBs4kxADIJEkQiKGVFAUEAJDEAIihlRHAARQFEsTIJIihlRDIJshSyEbIVIrISJLIQIrIBs7ExADIJsgkisgiyByOyECKyAbOJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AssetDistributor contract
 */
export type AssetDistributorArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(pay,uint64)void': {
      mbrTxn: AppMethodCallTransactionArgument
      assetId: bigint | number
    }
    'buyListing(pay)void': {
      /**
      * The transaction that pays for the asset.
      The transaction has the following constraints:
      - The amount must be 2000 microalgos or 0.02 algos.
      - The fee must be 2000 microalgos or 0.02 algos.

       */
      paymentTxn: AppMethodCallTransactionArgument
    }
    'withdrawEarnings()void': Record<string, never>
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(pay,uint64)void': [mbrTxn: AppMethodCallTransactionArgument, assetId: bigint | number]
    'buyListing(pay)void': [paymentTxn: AppMethodCallTransactionArgument]
    'withdrawEarnings()void': []
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type AssetDistributorReturns = {
  'createApplication()void': void
  'bootstrap(pay,uint64)void': void
  'buyListing(pay)void': void
  'withdrawEarnings()void': void
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the AssetDistributor smart contract.
 */
export type AssetDistributorTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: AssetDistributorArgs['obj']['createApplication()void']
      argsTuple: AssetDistributorArgs['tuple']['createApplication()void']
      returns: AssetDistributorReturns['createApplication()void']
    }>
    & Record<'bootstrap(pay,uint64)void' | 'bootstrap', {
      argsObj: AssetDistributorArgs['obj']['bootstrap(pay,uint64)void']
      argsTuple: AssetDistributorArgs['tuple']['bootstrap(pay,uint64)void']
      returns: AssetDistributorReturns['bootstrap(pay,uint64)void']
    }>
    & Record<'buyListing(pay)void' | 'buyListing', {
      argsObj: AssetDistributorArgs['obj']['buyListing(pay)void']
      argsTuple: AssetDistributorArgs['tuple']['buyListing(pay)void']
      returns: AssetDistributorReturns['buyListing(pay)void']
    }>
    & Record<'withdrawEarnings()void' | 'withdrawEarnings', {
      argsObj: AssetDistributorArgs['obj']['withdrawEarnings()void']
      argsTuple: AssetDistributorArgs['tuple']['withdrawEarnings()void']
      returns: AssetDistributorReturns['withdrawEarnings()void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: AssetDistributorArgs['obj']['deleteApplication()void']
      argsTuple: AssetDistributorArgs['tuple']['deleteApplication()void']
      returns: AssetDistributorReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AssetDistributorSignatures = keyof AssetDistributorTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AssetDistributorNonVoidMethodSignatures = keyof AssetDistributorTypes['methods'] extends infer T ? T extends keyof AssetDistributorTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AssetDistributor smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AssetDistributorSignatures> = AssetDistributorTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AssetDistributor smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AssetDistributorSignatures> = AssetDistributorTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AssetDistributorTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AssetDistributorCreateCallParams =
  | Expand<CallParams<AssetDistributorArgs['obj']['createApplication()void'] | AssetDistributorArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AssetDistributorArgs['obj']['createApplication()void'] | AssetDistributorArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type AssetDistributorDeleteCallParams =
  | Expand<CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AssetDistributorDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AssetDistributorCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: AssetDistributorDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AssetDistributor smart contract
 */
export abstract class AssetDistributorParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AssetDistributorCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return AssetDistributorParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AssetDistributor smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AssetDistributorArgs['obj']['createApplication()void'] | AssetDistributorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends AssetDistributorDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return AssetDistributorParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the AssetDistributor smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(pay,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<AssetDistributorArgs['obj']['bootstrap(pay,uint64)void'] | AssetDistributorArgs['tuple']['bootstrap(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the buyListing(pay)void ABI method
   *
   * This completes a buy transaction for the asset.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyListing(params: CallParams<AssetDistributorArgs['obj']['buyListing(pay)void'] | AssetDistributorArgs['tuple']['buyListing(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buyListing(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paymentTxn],
    }
  }
  /**
   * Constructs a no op call for the withdrawEarnings()void ABI method
   *
   * This withdraws all the earnings of the smart contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawEarnings(params: CallParams<AssetDistributorArgs['obj']['withdrawEarnings()void'] | AssetDistributorArgs['tuple']['withdrawEarnings()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawEarnings()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AssetDistributor smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AssetDistributorFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AssetDistributorFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AssetDistributorClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AssetDistributorClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AssetDistributor smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AssetDistributorDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AssetDistributorParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AssetDistributorCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? AssetDistributorParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (AssetDistributorDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AssetDistributorClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetDistributor smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AssetDistributorArgs['obj']['createApplication()void'] | AssetDistributorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(AssetDistributorParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the AssetDistributor smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(AssetDistributorParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetDistributor smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AssetDistributorArgs['obj']['createApplication()void'] | AssetDistributorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(AssetDistributorParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetDistributor smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AssetDistributorArgs['obj']['createApplication()void'] | AssetDistributorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(AssetDistributorParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AssetDistributorReturns['createApplication()void']) }, appClient: new AssetDistributorClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AssetDistributor smart contract
 */
export class AssetDistributorClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AssetDistributorClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AssetDistributor app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AssetDistributorClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AssetDistributorNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AssetDistributorClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AssetDistributorClient> {
    return new AssetDistributorClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AssetDistributorClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AssetDistributorClient> {
    return new AssetDistributorClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetDistributor smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(AssetDistributorParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AssetDistributor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `bootstrap(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<AssetDistributorArgs['obj']['bootstrap(pay,uint64)void'] | AssetDistributorArgs['tuple']['bootstrap(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetDistributorParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `buyListing(pay)void` ABI method.
     *
     * This completes a buy transaction for the asset.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyListing: (params: CallParams<AssetDistributorArgs['obj']['buyListing(pay)void'] | AssetDistributorArgs['tuple']['buyListing(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetDistributorParamsFactory.buyListing(params))
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `withdrawEarnings()void` ABI method.
     *
     * This withdraws all the earnings of the smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawEarnings: (params: CallParams<AssetDistributorArgs['obj']['withdrawEarnings()void'] | AssetDistributorArgs['tuple']['withdrawEarnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AssetDistributorParamsFactory.withdrawEarnings(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetDistributor smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(AssetDistributorParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AssetDistributor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `bootstrap(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<AssetDistributorArgs['obj']['bootstrap(pay,uint64)void'] | AssetDistributorArgs['tuple']['bootstrap(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetDistributorParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `buyListing(pay)void` ABI method.
     *
     * This completes a buy transaction for the asset.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyListing: (params: CallParams<AssetDistributorArgs['obj']['buyListing(pay)void'] | AssetDistributorArgs['tuple']['buyListing(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetDistributorParamsFactory.buyListing(params))
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `withdrawEarnings()void` ABI method.
     *
     * This withdraws all the earnings of the smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawEarnings: (params: CallParams<AssetDistributorArgs['obj']['withdrawEarnings()void'] | AssetDistributorArgs['tuple']['withdrawEarnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AssetDistributorParamsFactory.withdrawEarnings(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetDistributor smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(AssetDistributorParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | AssetDistributorReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AssetDistributor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `bootstrap(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<AssetDistributorArgs['obj']['bootstrap(pay,uint64)void'] | AssetDistributorArgs['tuple']['bootstrap(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetDistributorParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | AssetDistributorReturns['bootstrap(pay,uint64)void'])}
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `buyListing(pay)void` ABI method.
     *
     * This completes a buy transaction for the asset.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyListing: async (params: CallParams<AssetDistributorArgs['obj']['buyListing(pay)void'] | AssetDistributorArgs['tuple']['buyListing(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetDistributorParamsFactory.buyListing(params))
      return {...result, return: result.return as unknown as (undefined | AssetDistributorReturns['buyListing(pay)void'])}
    },

    /**
     * Makes a call to the AssetDistributor smart contract using the `withdrawEarnings()void` ABI method.
     *
     * This withdraws all the earnings of the smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawEarnings: async (params: CallParams<AssetDistributorArgs['obj']['withdrawEarnings()void'] | AssetDistributorArgs['tuple']['withdrawEarnings()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AssetDistributorParamsFactory.withdrawEarnings(params))
      return {...result, return: result.return as unknown as (undefined | AssetDistributorReturns['withdrawEarnings()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AssetDistributorClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AssetDistributor app
   */
  state = {
    /**
     * Methods to access global state for the current AssetDistributor app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.assetId,
        }
      },
      /**
       * Get the current value of the assetId key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetId")) as bigint | undefined },
    },
  }

  public newGroup(): AssetDistributorComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(pay,uint64)void method call against the AssetDistributor contract
       */
      bootstrap(params: CallParams<AssetDistributorArgs['obj']['bootstrap(pay,uint64)void'] | AssetDistributorArgs['tuple']['bootstrap(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buyListing(pay)void method call against the AssetDistributor contract
       */
      buyListing(params: CallParams<AssetDistributorArgs['obj']['buyListing(pay)void'] | AssetDistributorArgs['tuple']['buyListing(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyListing(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawEarnings()void method call against the AssetDistributor contract
       */
      withdrawEarnings(params: CallParams<AssetDistributorArgs['obj']['withdrawEarnings()void'] | AssetDistributorArgs['tuple']['withdrawEarnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawEarnings(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the AssetDistributor contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AssetDistributorComposer
  }
}
export type AssetDistributorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<AssetDistributorArgs['obj']['bootstrap(pay,uint64)void'] | AssetDistributorArgs['tuple']['bootstrap(pay,uint64)void']>): AssetDistributorComposer<[...TReturns, AssetDistributorReturns['bootstrap(pay,uint64)void'] | undefined]>

  /**
   * Calls the buyListing(pay)void ABI method.
   *
   * This completes a buy transaction for the asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyListing(params?: CallParams<AssetDistributorArgs['obj']['buyListing(pay)void'] | AssetDistributorArgs['tuple']['buyListing(pay)void']>): AssetDistributorComposer<[...TReturns, AssetDistributorReturns['buyListing(pay)void'] | undefined]>

  /**
   * Calls the withdrawEarnings()void ABI method.
   *
   * This withdraws all the earnings of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawEarnings(params?: CallParams<AssetDistributorArgs['obj']['withdrawEarnings()void'] | AssetDistributorArgs['tuple']['withdrawEarnings()void']>): AssetDistributorComposer<[...TReturns, AssetDistributorReturns['withdrawEarnings()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the AssetDistributor smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<AssetDistributorArgs['obj']['deleteApplication()void'] | AssetDistributorArgs['tuple']['deleteApplication()void']>): AssetDistributorComposer<[...TReturns, AssetDistributorReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AssetDistributor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AssetDistributorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AssetDistributorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AssetDistributorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AssetDistributorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AssetDistributorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AssetDistributorComposerResults<TReturns>>
}
export type AssetDistributorComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

