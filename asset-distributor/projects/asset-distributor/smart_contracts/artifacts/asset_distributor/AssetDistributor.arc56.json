{
    "name": "AssetDistributor",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrTxn"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buyListing",
            "args": [
                {
                    "type": "pay",
                    "name": "paymentTxn",
                    "desc": "The transaction that pays for the asset.\nThe transaction has the following constraints: \n- The amount must be 2000 microalgos or 0.02 algos.\n- The fee must be 2000 microalgos or 0.02 algos."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "This completes a buy transaction for the asset.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdrawEarnings",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "This withdraws all the earnings of the smart contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "assetId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRJZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        161
                    ],
                    "errorMessage": "Minimum balance must be at least 0.2 algos"
                },
                {
                    "pc": [
                        73
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        85,
                        97,
                        119,
                        145
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        238
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        149
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        76,
                        88,
                        100,
                        122
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        208,
                        235,
                        263,
                        330,
                        342
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        110,
                        132
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEEwJoMJgEHYXNzZXRJZDEbQQAqggUEuER7NgQeMgGaBHuR6U4EAl/a0wQkh8MsNhoAjgUATAAyABwAEAACIkMxGYEFEkQxGESIAOcjQzEZFEQxGESIAL0jQzEZFEQxGEQxFiMJSTgQIxJEiABWI0MxGRREMRhEMRYjCUk4ECMSRDYaAReIAAwjQzEZFEQxGBREI0OKAgCL/jgIJQ9Ei/44BzIKEkQxADIJEkSxMgqL/7IRshQishIkshAisgGzKIv/Z4mKAQAxACIoZURwAEUBRIv/OAcyChJEi/84ADEAEkQxACIoZURwAEQURIv/OAiB0A8SRIv/OAGB0A8SRLEiKGVEMQCyFCOyErIRJLIQIrIBs4kxADIJEkQyCnMARCUJSUSxMQCyB7III7IQIrIBs4kxADIJEkQiKGVFAUEAJDEAIihlRHAARQFEsTIJIihlRDIJshSyEbIVIrISJLIQIrIBs7ExADIJsgkisgiyByOyECKyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}